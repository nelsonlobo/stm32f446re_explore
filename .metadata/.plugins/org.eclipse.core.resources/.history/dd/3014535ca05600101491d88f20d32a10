/*
 * stm32f446xx_spi_driver.h
 *
 *  Created on: Jul 1, 2025
 *      Author: lenovo
 */

#ifndef INC_STM32F446XX_SPI_DRIVER_H_
#define INC_STM32F446XX_SPI_DRIVER_H_

#include "stdint.h"
#include "stdbool.h"
#include "stm32f446xx.h"

/*
 * Bit position definitions of SPI CR1 register
 */
#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR			3
#define SPI_CR1_SPE			6
#define SPI_CR1_LSB_FIRST	7
#define SPI_CR1_SSI			8
#define SPI_CR1_SSM			9
#define SPI_CR1_RXONLY		10
#define SPI_CR1_DFF			11
#define SPI_CR1_CRCNEXT		12
#define SPI_CR1_CRCEN		13
#define SPI_CR1_BIDIOE		14
#define SPI_CR1_BIDIMODE	15


/*
 * Bit position definitions of SPI CR2 register
 */
#define SPI_CR2_TXEIE		7
#define SPI_CR2_RXNEIE		6
#define SPI_CR2_ERRIE		5
#define SPI_CR2_FRF			4
#define SPI_CR2_SSOE		2
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_RXDMAEN		0


/*
 * Bit position definitions for SPI_SR register
 */
#define SPI_SR_FRE			8
#define SPI_SR_BSY			7
#define SPI_SR_OVR			6
#define SPI_SR_MODF			5
#define SPI_SR_CRCERR		4
#define SPI_SR_UDR			3
#define SPI_SR_CHSIDE		2
#define SPI_SR_TXE			1
#define SPI_SR_RXNE			0


typedef struct
{
	uint8_t SPI_DeviceMode;
	uint8_t SPI_BusConfig;
	uint8_t SPI_SclkSpeed;
	uint8_t SPI_DFF;
	uint8_t SPI_CPOL;
	uint8_t SPI_CPHA;
	uint8_t SPI_SSM;
}SPI_Config_t;

typedef struct
{
	SPI_RegDef_t *pSPIx;
	SPI_Config_t SPIConfig;
}SPI_Handle_t;


/*
 * SPI device Mode
 */
#define SPI_DEVICE_MODE_MASTER			1
#define SPI_DEVICE_MODE_SLAVE			0

/*
 * SPI Bus config
 */
#define SPI_BUS_CONFIG_FULL_DUPLEX		1
#define SPI_BUS_CONFIG_HALF_DUPLEX		2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY	3

/*
 * SPI Clock speed
 */
#define	SPI_SCLK_SPEED_DIV2				0
#define	SPI_SCLK_SPEED_DIV4				1
#define	SPI_SCLK_SPEED_DIV8				2
#define	SPI_SCLK_SPEED_DIV16			3
#define	SPI_SCLK_SPEED_DIV32			4
#define	SPI_SCLK_SPEED_DIV64			5
#define	SPI_SCLK_SPEED_DIV128			6
#define	SPI_SCLK_SPEED_DIV256			7

/*
 * SPI Data frame format
 */
#define SPI_DFF_8BITS		0
#define SPI_DFF_16BITS		1

/*
 * SPI Clock polarity
 * Indicates the state of the pin
 * CPOL = 0 then Idle state is logic low
 * CPOL = 1 then Idle state is logic high
 */
#define CPOL_LOW			0
#define CPOL_HIGH			1

/*
 * SPI clock phase selection bit.
 * Manages at which edge the sampling should be performed
 * CPHA = 0 Leading edge
 * CPHA = 1 trailing edge
 */
#define CPHA_LOW			0
#define CPHA_HIGH			1

/*
 * SPI Slave select management bit
 */
#define SPI_SSM_DIS			0
#define SPI_SSM_EN			1

#define	SPI_TXE_FLAG		(1<<SPI_SR_TXE)

//Peripheral clock setup
void SPI_PClk_Ctrl(SPI_RegDef_t *pGPIOx, uint8_t status);

//SPI init & deinit
void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);


/*
 * Data Send and Receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTXBuffer, uint32_t len);
void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRXBuffer, uint32_t len);

/*
 * IRQ configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t status);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

#endif /* INC_STM32F446XX_SPI_DRIVER_H_ */
