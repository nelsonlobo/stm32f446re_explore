/*
 * stm32f446xx_gpio_driver.c
 *
 *  Created on: Jun 21, 2025
 *      Author: lenovo
 */


#include "stm32f446xx_gpio_driver.h"

/*
 * APIs supported by this driver
 */

//Peripheral clock setup
/**********************************************************
 * @fn		-	GPIO_PClk_Ctrl(
 *
 * @brief	- This function enables or disable peripheral clock for any given GPIO port
 *
 * @param	- Base address of the GPIO peripheral
 * @param	- ENABLE or DISABLE macros
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_PClk_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
	if(status == ENABLE)
	{
		if(pGPIOx == GPIOA)
		{
			GPIOA_PCLK_EN();
		}
		else if(pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}
		else if(pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
		else if(pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}
		else if(pGPIOx == GPIOE)
		{
			GPIOE_PCLK_EN();
		}
		else if(pGPIOx == GPIOF)
		{
			GPIOF_PCLK_EN();
		}
		else if(pGPIOx == GPIOG)
		{
			GPIOG_PCLK_EN();
		}
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_EN();
		}
		else
		{
			#error "GPIO Port Does not exist"
		}
	}
}

/**********************************************************
 * @fn		- GPIO_Init
 *
 * @brief	- This function is used to initialize any given GPIO port
 *
 * @param	- GPIO handle provides all the information related to any given GPIO port
 *
 * @return	- none
 *
 * @note	- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{

}


/**********************************************************
 * @fn		- GPIO_DeInit
 *
 * @brief	- This function is used to de-initialize any given GPIO port
 *
 * @param	- Base address of the GPIO peripheral
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{

}

/**********************************************************
 * @fn		- GPIO_ReadFromInputPin
 *
 * @brief	- This function is used to read status of any given GPIO port pin
 *
 * @param	- Base address of the GPIO peripheral
 *
 * @return	- none
 *
 * @note	- none
 */
bool GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)
{

}

/**********************************************************
 * @fn		- GPIO_ReadFromInputPin
 *
 * @brief	- This function is used to read status of any given GPIO port pin
 *
 * @param	- Base address of the GPIO peripheral
 *
 * @return	- none
 *
 * @note	- none
 */
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{

}

/**********************************************************
 * @fn		- GPIO_WriteToOutputPin
 *
 * @brief	- This function is used to read status of any given GPIO port pin
 *
 * @param1	- Base address of the GPIO peripheral
 * @param2	- Pass the pin number of the respective GPIO port
 * @param3	- Set or clear the state of the pin
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber,bool state)
{

}

/**********************************************************
 * @fn		- GPIO_WriteToOutputPort
 *
 * @brief	- This function is used to read status of any given GPIO port
 *
 * @param1	- Base address of the GPIO peripheral
 * @param2	- Pass 16 bit value to set or clear individual bits on this port
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx,uint16_t value)
{

}

/**********************************************************
 * @fn		- GPIO_TogglePin
 *
 * @brief	- This function is used to toggle the output state of any given GPIO port pin
 *
 * @param1	- Base address of the GPIO peripheral
 * @param2	- Pass the pin number of the respective GPIO port
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx,uint8_t PinNumber)
{

}

/**********************************************************
 * @fn		- GPIO_IRQConfig
 *
 * @brief	- This function is used to Configure the interrupt for any given GPIO
 *
 * @param1	- IRQNumber
 * @param2	- IRQPriority is the priority set by the user
 * @param3	- Enable or Disable
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_IQRConfig(uint8_t IRQNumber, uint8_t IRQPriority, bool status)
{

}

/**********************************************************
 * @fn		- GPIO_IRQHandling
 *
 * @brief	- This function is used to handle the interrupt for any given GPIO
 *
 * @param1	- PinNumber
 *
 * @return	- none
 *
 * @note	- none
 */
void GPIO_IQRHandling(uint8_t pinNumber)
{

}
