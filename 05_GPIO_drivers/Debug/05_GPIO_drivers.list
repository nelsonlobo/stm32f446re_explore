
05_GPIO_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000950  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b14  08000b14  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b14  08000b14  00002024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b14  08000b14  00001b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b1c  08000b1c  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b20  08000b20  00001b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08000b24  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  08000b48  00002024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000b48  00002040  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001121  00000000  00000000  0000204e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ba  00000000  00000000  0000316f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00003630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000be  00000000  00000000  00003740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000294d  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000179c  00000000  00000000  0000614b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000998a  00000000  00000000  000078e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000360  00000000  00000000  000112b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00011614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000afc 	.word	0x08000afc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08000afc 	.word	0x08000afc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <main>:


char user_data[] = "Hello World,its a beautiful day!";

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	SPI_GPIO_Init();
 8000218:	f000 f826 	bl	8000268 <SPI_GPIO_Init>
	SPI1_Configurations();
 800021c:	f000 f84c 	bl	80002b8 <SPI1_Configurations>
	SPI_SSOEConfig(SPI1,ENABLE);
 8000220:	2101      	movs	r1, #1
 8000222:	480f      	ldr	r0, [pc, #60]	@ (8000260 <main+0x4c>)
 8000224:	f000 fc0f 	bl	8000a46 <SPI_SSOEConfig>
	SPI_PeripheralControl(SPI1, ENABLE);
 8000228:	2101      	movs	r1, #1
 800022a:	480d      	ldr	r0, [pc, #52]	@ (8000260 <main+0x4c>)
 800022c:	f000 fc26 	bl	8000a7c <SPI_PeripheralControl>
//	uint8_t dataLen = strlen(user_data);
//	SPI_SendData(SPI1, &dataLen, 1);
	SPI_SendData(SPI1, (uint8_t *)user_data, strlen(user_data));
 8000230:	480c      	ldr	r0, [pc, #48]	@ (8000264 <main+0x50>)
 8000232:	f7ff ffe7 	bl	8000204 <strlen>
 8000236:	4603      	mov	r3, r0
 8000238:	461a      	mov	r2, r3
 800023a:	490a      	ldr	r1, [pc, #40]	@ (8000264 <main+0x50>)
 800023c:	4808      	ldr	r0, [pc, #32]	@ (8000260 <main+0x4c>)
 800023e:	f000 fbc8 	bl	80009d2 <SPI_SendData>
	while(SPI_GetFLagStatus(SPI1, SPI_BSY_FLAG));
 8000242:	bf00      	nop
 8000244:	2180      	movs	r1, #128	@ 0x80
 8000246:	4806      	ldr	r0, [pc, #24]	@ (8000260 <main+0x4c>)
 8000248:	f000 fbb0 	bl	80009ac <SPI_GetFLagStatus>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1f8      	bne.n	8000244 <main+0x30>
	SPI_PeripheralControl(SPI1, DISABLE);
 8000252:	2100      	movs	r1, #0
 8000254:	4802      	ldr	r0, [pc, #8]	@ (8000260 <main+0x4c>)
 8000256:	f000 fc11 	bl	8000a7c <SPI_PeripheralControl>
	while(1);
 800025a:	bf00      	nop
 800025c:	e7fd      	b.n	800025a <main+0x46>
 800025e:	bf00      	nop
 8000260:	40013000 	.word	0x40013000
 8000264:	20000000 	.word	0x20000000

08000268 <SPI_GPIO_Init>:
	return 0;
}


void SPI_GPIO_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <SPI_GPIO_Init+0x4c>)
 8000270:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000272:	2302      	movs	r3, #2
 8000274:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFnMode = 5;
 8000276:	2305      	movs	r3, #5
 8000278:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027e:	2300      	movs	r3, #0
 8000280:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]

	//SPI_NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 4;
 8000286:	2304      	movs	r3, #4
 8000288:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f92d 	bl	80004ec <GPIO_Init>

	//SPI_SCK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 5;
 8000292:	2305      	movs	r3, #5
 8000294:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f927 	bl	80004ec <GPIO_Init>
//	//SPI_MISO
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 6;
//	GPIO_Init(&SPIPins);

	//SPI_MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 7;
 800029e:	2307      	movs	r3, #7
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f921 	bl	80004ec <GPIO_Init>

}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40020000 	.word	0x40020000

080002b8 <SPI1_Configurations>:


void SPI1_Configurations(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Handle;

	SPI1Handle.pSPIx = SPI1;
 80002be:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <SPI1_Configurations+0x3c>)
 80002c0:	607b      	str	r3, [r7, #4]
	SPI1Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLEX;
 80002c2:	2301      	movs	r3, #1
 80002c4:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002c6:	2301      	movs	r3, #1
 80002c8:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 80002ca:	2300      	movs	r3, #0
 80002cc:	72bb      	strb	r3, [r7, #10]
	SPI1Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002ce:	2300      	movs	r3, #0
 80002d0:	72fb      	strb	r3, [r7, #11]
	SPI1Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002d2:	2300      	movs	r3, #0
 80002d4:	733b      	strb	r3, [r7, #12]
	SPI1Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	737b      	strb	r3, [r7, #13]
	SPI1Handle.SPIConfig.SPI_SSM = SPI_SSM_DIS;
 80002da:	2300      	movs	r3, #0
 80002dc:	73bb      	strb	r3, [r7, #14]
	SPI1Handle.SPIConfig.SPI_SSI = SPI_SSI_DIS;
 80002de:	2300      	movs	r3, #0
 80002e0:	73fb      	strb	r3, [r7, #15]

	SPI_Init(&SPI1Handle);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fb09 	bl	80008fc <SPI_Init>
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40013000 	.word	0x40013000

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	@ (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 fbc5 	bl	8000ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff73 	bl	8000214 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800033c:	08000b24 	.word	0x08000b24
  ldr r2, =_sbss
 8000340:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000344:	20000040 	.word	0x20000040

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <GPIO_PClk_Ctrl>:
 * @return	- none
 *
 * @note	- none
 */
void GPIO_PClk_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE)
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d157      	bne.n	800040e <GPIO_PClk_Ctrl+0xc2>
	{
		if(pGPIOx == GPIOA)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a59      	ldr	r2, [pc, #356]	@ (80004c8 <GPIO_PClk_Ctrl+0x17c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PClk_Ctrl+0x28>
		{
			GPIOA_PCLK_EN();
 8000366:	4b59      	ldr	r3, [pc, #356]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a58      	ldr	r2, [pc, #352]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
		else
		{
//			#error "GPIO Port Does not exist"
		}
	}
}
 8000372:	e0a3      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOB)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a56      	ldr	r2, [pc, #344]	@ (80004d0 <GPIO_PClk_Ctrl+0x184>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PClk_Ctrl+0x3e>
			GPIOB_PCLK_EN();
 800037c:	4b53      	ldr	r3, [pc, #332]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a52      	ldr	r2, [pc, #328]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000382:	f043 0302 	orr.w	r3, r3, #2
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e098      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOC)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a51      	ldr	r2, [pc, #324]	@ (80004d4 <GPIO_PClk_Ctrl+0x188>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PClk_Ctrl+0x54>
			GPIOC_PCLK_EN();
 8000392:	4b4e      	ldr	r3, [pc, #312]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a4d      	ldr	r2, [pc, #308]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	e08d      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOD)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a4d      	ldr	r2, [pc, #308]	@ (80004d8 <GPIO_PClk_Ctrl+0x18c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PClk_Ctrl+0x6a>
			GPIOD_PCLK_EN();
 80003a8:	4b48      	ldr	r3, [pc, #288]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a47      	ldr	r2, [pc, #284]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e082      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOE)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a48      	ldr	r2, [pc, #288]	@ (80004dc <GPIO_PClk_Ctrl+0x190>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PClk_Ctrl+0x80>
			GPIOE_PCLK_EN();
 80003be:	4b43      	ldr	r3, [pc, #268]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a42      	ldr	r2, [pc, #264]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003c4:	f043 0310 	orr.w	r3, r3, #16
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ca:	e077      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOF)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a44      	ldr	r2, [pc, #272]	@ (80004e0 <GPIO_PClk_Ctrl+0x194>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PClk_Ctrl+0x96>
			GPIOF_PCLK_EN();
 80003d4:	4b3d      	ldr	r3, [pc, #244]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a3c      	ldr	r2, [pc, #240]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e0:	e06c      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOG)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a3f      	ldr	r2, [pc, #252]	@ (80004e4 <GPIO_PClk_Ctrl+0x198>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PClk_Ctrl+0xac>
			GPIOG_PCLK_EN();
 80003ea:	4b38      	ldr	r3, [pc, #224]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	4a37      	ldr	r2, [pc, #220]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80003f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f6:	e061      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOH)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a3b      	ldr	r2, [pc, #236]	@ (80004e8 <GPIO_PClk_Ctrl+0x19c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d15d      	bne.n	80004bc <GPIO_PClk_Ctrl+0x170>
			GPIOH_PCLK_EN();
 8000400:	4b32      	ldr	r3, [pc, #200]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a31      	ldr	r2, [pc, #196]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	e056      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		if(pGPIOx == GPIOA)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a2d      	ldr	r2, [pc, #180]	@ (80004c8 <GPIO_PClk_Ctrl+0x17c>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PClk_Ctrl+0xd8>
			GPIOA_PCLK_DIS();
 8000416:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041a:	4a2c      	ldr	r2, [pc, #176]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000422:	e04b      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOB)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a2a      	ldr	r2, [pc, #168]	@ (80004d0 <GPIO_PClk_Ctrl+0x184>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PClk_Ctrl+0xee>
			GPIOB_PCLK_DIS();
 800042c:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000430:	4a26      	ldr	r2, [pc, #152]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000432:	f023 0302 	bic.w	r3, r3, #2
 8000436:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000438:	e040      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOC)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a25      	ldr	r2, [pc, #148]	@ (80004d4 <GPIO_PClk_Ctrl+0x188>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PClk_Ctrl+0x104>
			GPIOC_PCLK_DIS();
 8000442:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000446:	4a21      	ldr	r2, [pc, #132]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000448:	f023 0304 	bic.w	r3, r3, #4
 800044c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044e:	e035      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOD)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a21      	ldr	r2, [pc, #132]	@ (80004d8 <GPIO_PClk_Ctrl+0x18c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PClk_Ctrl+0x11a>
			GPIOD_PCLK_DIS();
 8000458:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045c:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800045e:	f023 0308 	bic.w	r3, r3, #8
 8000462:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000464:	e02a      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOE)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a1c      	ldr	r2, [pc, #112]	@ (80004dc <GPIO_PClk_Ctrl+0x190>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PClk_Ctrl+0x130>
			GPIOE_PCLK_DIS();
 800046e:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	4a16      	ldr	r2, [pc, #88]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000474:	f023 0310 	bic.w	r3, r3, #16
 8000478:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047a:	e01f      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOF)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a18      	ldr	r2, [pc, #96]	@ (80004e0 <GPIO_PClk_Ctrl+0x194>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PClk_Ctrl+0x146>
			GPIOF_PCLK_DIS();
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000488:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800048a:	f023 0320 	bic.w	r3, r3, #32
 800048e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000490:	e014      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOG)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <GPIO_PClk_Ctrl+0x198>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PClk_Ctrl+0x15c>
			GPIOG_PCLK_DIS();
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049e:	4a0b      	ldr	r2, [pc, #44]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80004a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a6:	e009      	b.n	80004bc <GPIO_PClk_Ctrl+0x170>
		else if(pGPIOx == GPIOH)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <GPIO_PClk_Ctrl+0x19c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d105      	bne.n	80004bc <GPIO_PClk_Ctrl+0x170>
			GPIOH_PCLK_DIS();
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b4:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <GPIO_PClk_Ctrl+0x180>)
 80004b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020400 	.word	0x40020400
 80004d4:	40020800 	.word	0x40020800
 80004d8:	40020c00 	.word	0x40020c00
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40021400 	.word	0x40021400
 80004e4:	40021800 	.word	0x40021800
 80004e8:	40021c00 	.word	0x40021c00

080004ec <GPIO_Init>:
 *
 * @note	- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

	GPIO_PClk_Ctrl(pGPIOHandle->pGPIOx,ENABLE);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2101      	movs	r1, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff24 	bl	800034c <GPIO_PClk_Ctrl>

	//Configure the mode register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b03      	cmp	r3, #3
 800050a:	d81f      	bhi.n	800054c <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	4619      	mov	r1, r3
 800052a:	2303      	movs	r3, #3
 800052c:	408b      	lsls	r3, r1
 800052e:	43db      	mvns	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	400a      	ands	r2, r1
 8000538:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6819      	ldr	r1, [r3, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	430a      	orrs	r2, r1
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	e0c2      	b.n	80006d2 <GPIO_Init+0x1e6>
	}
	else
	{
		//Handles the interrupt section
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b05      	cmp	r3, #5
 8000552:	d817      	bhi.n	8000584 <GPIO_Init+0x98>
		{
			//1.Configure the falling edge trigger status register
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000554:	4b47      	ldr	r3, [pc, #284]	@ (8000674 <GPIO_Init+0x188>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a43      	ldr	r2, [pc, #268]	@ (8000674 <GPIO_Init+0x188>)
 8000566:	430b      	orrs	r3, r1
 8000568:	60d3      	str	r3, [r2, #12]
			//2.Clear respective RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <GPIO_Init+0x188>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	43d2      	mvns	r2, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a3d      	ldr	r2, [pc, #244]	@ (8000674 <GPIO_Init+0x188>)
 800057e:	400b      	ands	r3, r1
 8000580:	6093      	str	r3, [r2, #8]
 8000582:	e035      	b.n	80005f0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d817      	bhi.n	80005bc <GPIO_Init+0xd0>
		{
			//1.Configure the rising edge trigger status register
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <GPIO_Init+0x188>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a35      	ldr	r2, [pc, #212]	@ (8000674 <GPIO_Init+0x188>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6093      	str	r3, [r2, #8]
			//2.Clear respective FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b34      	ldr	r3, [pc, #208]	@ (8000674 <GPIO_Init+0x188>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000674 <GPIO_Init+0x188>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	60d3      	str	r3, [r2, #12]
 80005ba:	e019      	b.n	80005f0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b06      	cmp	r3, #6
 80005c2:	d815      	bhi.n	80005f0 <GPIO_Init+0x104>
		{
			//1.Configure the rising & falling edge trigger status register
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <GPIO_Init+0x188>)
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <GPIO_Init+0x188>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	4b26      	ldr	r3, [pc, #152]	@ (8000674 <GPIO_Init+0x188>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <GPIO_Init+0x188>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	60d3      	str	r3, [r2, #12]
		}
		//2. Configure the gpio port selection in sysconfig_extiCR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	089b      	lsrs	r3, r3, #2
 80005f6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <GPIO_Init+0x18c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d045      	beq.n	8000698 <GPIO_Init+0x1ac>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1a      	ldr	r2, [pc, #104]	@ (800067c <GPIO_Init+0x190>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d02b      	beq.n	800066e <GPIO_Init+0x182>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <GPIO_Init+0x194>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d024      	beq.n	800066a <GPIO_Init+0x17e>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a17      	ldr	r2, [pc, #92]	@ (8000684 <GPIO_Init+0x198>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d01d      	beq.n	8000666 <GPIO_Init+0x17a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a16      	ldr	r2, [pc, #88]	@ (8000688 <GPIO_Init+0x19c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d016      	beq.n	8000662 <GPIO_Init+0x176>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a14      	ldr	r2, [pc, #80]	@ (800068c <GPIO_Init+0x1a0>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d00f      	beq.n	800065e <GPIO_Init+0x172>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <GPIO_Init+0x1a4>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d008      	beq.n	800065a <GPIO_Init+0x16e>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a11      	ldr	r2, [pc, #68]	@ (8000694 <GPIO_Init+0x1a8>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d101      	bne.n	8000656 <GPIO_Init+0x16a>
 8000652:	2307      	movs	r3, #7
 8000654:	e021      	b.n	800069a <GPIO_Init+0x1ae>
 8000656:	2300      	movs	r3, #0
 8000658:	e01f      	b.n	800069a <GPIO_Init+0x1ae>
 800065a:	2306      	movs	r3, #6
 800065c:	e01d      	b.n	800069a <GPIO_Init+0x1ae>
 800065e:	2305      	movs	r3, #5
 8000660:	e01b      	b.n	800069a <GPIO_Init+0x1ae>
 8000662:	2304      	movs	r3, #4
 8000664:	e019      	b.n	800069a <GPIO_Init+0x1ae>
 8000666:	2303      	movs	r3, #3
 8000668:	e017      	b.n	800069a <GPIO_Init+0x1ae>
 800066a:	2302      	movs	r3, #2
 800066c:	e015      	b.n	800069a <GPIO_Init+0x1ae>
 800066e:	2301      	movs	r3, #1
 8000670:	e013      	b.n	800069a <GPIO_Init+0x1ae>
 8000672:	bf00      	nop
 8000674:	40013c00 	.word	0x40013c00
 8000678:	40020000 	.word	0x40020000
 800067c:	40020400 	.word	0x40020400
 8000680:	40020800 	.word	0x40020800
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40021000 	.word	0x40021000
 800068c:	40021400 	.word	0x40021400
 8000690:	40021800 	.word	0x40021800
 8000694:	40021c00 	.word	0x40021c00
 8000698:	2300      	movs	r3, #0
 800069a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800069c:	4b5c      	ldr	r3, [pc, #368]	@ (8000810 <GPIO_Init+0x324>)
 800069e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a0:	4a5b      	ldr	r2, [pc, #364]	@ (8000810 <GPIO_Init+0x324>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2 * 4);
 80006a8:	7c7a      	ldrb	r2, [r7, #17]
 80006aa:	7cbb      	ldrb	r3, [r7, #18]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	fa02 f103 	lsl.w	r1, r2, r3
 80006b2:	4a58      	ldr	r2, [pc, #352]	@ (8000814 <GPIO_Init+0x328>)
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	3302      	adds	r3, #2
 80006b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the exti interrupt delivery using IMR (Interrupt mask register)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006bc:	4b56      	ldr	r3, [pc, #344]	@ (8000818 <GPIO_Init+0x32c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7912      	ldrb	r2, [r2, #4]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a52      	ldr	r2, [pc, #328]	@ (8000818 <GPIO_Init+0x32c>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

	//Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	799b      	ldrb	r3, [r3, #6]
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	4619      	mov	r1, r3
 80006f4:	2303      	movs	r3, #3
 80006f6:	408b      	lsls	r3, r1
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	400a      	ands	r2, r1
 8000702:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6899      	ldr	r1, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	430a      	orrs	r2, r1
 8000712:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

	//Configure the PU/PD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	79db      	ldrb	r3, [r3, #7]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	4619      	mov	r1, r3
 8000736:	2303      	movs	r3, #3
 8000738:	408b      	lsls	r3, r1
 800073a:	43db      	mvns	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	400a      	ands	r2, r1
 8000744:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68d9      	ldr	r1, [r3, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	430a      	orrs	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

	//Configure the Output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7a1b      	ldrb	r3, [r3, #8]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	4619      	mov	r1, r3
 8000776:	2301      	movs	r3, #1
 8000778:	408b      	lsls	r3, r1
 800077a:	43db      	mvns	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	400a      	ands	r2, r1
 8000784:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6859      	ldr	r1, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	430a      	orrs	r2, r1
 8000794:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

	//Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d131      	bne.n	8000806 <GPIO_Init+0x31a>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF<<(4*temp2));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7c3a      	ldrb	r2, [r7, #16]
 80007ba:	3208      	adds	r2, #8
 80007bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	220f      	movs	r2, #15
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	7c3a      	ldrb	r2, [r7, #16]
 80007d4:	4001      	ands	r1, r0
 80007d6:	3208      	adds	r2, #8
 80007d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFnMode << (4*temp2));
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	7c3a      	ldrb	r2, [r7, #16]
 80007e2:	3208      	adds	r2, #8
 80007e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7a5b      	ldrb	r3, [r3, #9]
 80007ec:	461a      	mov	r2, r3
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7c3a      	ldrb	r2, [r7, #16]
 80007fe:	4301      	orrs	r1, r0
 8000800:	3208      	adds	r2, #8
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40013800 	.word	0x40013800
 8000818:	40013c00 	.word	0x40013c00

0800081c <SPI_PClk_Ctrl>:

#include "stm32f446xx_spi_driver.h"


void SPI_PClk_Ctrl(SPI_RegDef_t *pSPIx, uint8_t status)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE)
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d12b      	bne.n	8000886 <SPI_PClk_Ctrl+0x6a>
	{
		if(pSPIx == SPI1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a2d      	ldr	r2, [pc, #180]	@ (80008e8 <SPI_PClk_Ctrl+0xcc>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d106      	bne.n	8000844 <SPI_PClk_Ctrl+0x28>
		{
			SPI1_PCLK_EN();
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 800083c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000840:	6453      	str	r3, [r2, #68]	@ 0x44
		else
		{

		}
	}
}
 8000842:	e04b      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		else if(pSPIx == SPI2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a2a      	ldr	r2, [pc, #168]	@ (80008f0 <SPI_PClk_Ctrl+0xd4>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <SPI_PClk_Ctrl+0x3e>
			SPI2_PCLK_EN();
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000858:	e040      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		else if(pSPIx == SPI3)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a25      	ldr	r2, [pc, #148]	@ (80008f4 <SPI_PClk_Ctrl+0xd8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <SPI_PClk_Ctrl+0x54>
			SPI3_PCLK_EN();
 8000862:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 8000868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800086e:	e035      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		else if(pSPIx == SPI4)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <SPI_PClk_Ctrl+0xdc>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d131      	bne.n	80008dc <SPI_PClk_Ctrl+0xc0>
			SPI4_PCLK_EN();
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 800087e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000882:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000884:	e02a      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		if(pSPIx == SPI1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <SPI_PClk_Ctrl+0xcc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <SPI_PClk_Ctrl+0x80>
			SPI1_PCLK_DIS();
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 8000894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000898:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800089a:	e01f      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		else if(pSPIx == SPI2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <SPI_PClk_Ctrl+0xd4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d106      	bne.n	80008b2 <SPI_PClk_Ctrl+0x96>
			SPI2_PCLK_DIS();
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 80008aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008b0:	e014      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		else if(pSPIx == SPI3)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <SPI_PClk_Ctrl+0xd8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PClk_Ctrl+0xac>
			SPI3_PCLK_DIS();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 80008c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008c6:	e009      	b.n	80008dc <SPI_PClk_Ctrl+0xc0>
		else if(pSPIx == SPI4)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <SPI_PClk_Ctrl+0xdc>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d105      	bne.n	80008dc <SPI_PClk_Ctrl+0xc0>
			SPI4_PCLK_DIS();
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 80008d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d4:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SPI_PClk_Ctrl+0xd0>)
 80008d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008da:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40003800 	.word	0x40003800
 80008f4:	40003c00 	.word	0x40003c00
 80008f8:	40013400 	.word	0x40013400

080008fc <SPI_Init>:


void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]

	SPI_PClk_Ctrl(pSPIHandle->pSPIx, ENABLE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff84 	bl	800081c <SPI_PClk_Ctrl>

	//1.Configure the SPI mode as master or slave by setting or clearing this bit respectively
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

	//2.Configure the bus
	if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FULL_DUPLEX)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d104      	bne.n	8000932 <SPI_Init+0x36>
	{
		tempReg &= ~(1<<SPI_CR1_BIDIMODE);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e010      	b.n	8000954 <SPI_Init+0x58>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HALF_DUPLEX)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d104      	bne.n	8000944 <SPI_Init+0x48>
	{
		tempReg |= (1<<SPI_CR1_BIDIMODE);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e007      	b.n	8000954 <SPI_Init+0x58>
	}
	else
	{
		tempReg &= ~(1<<SPI_CR1_BIDIMODE);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800094a:	60fb      	str	r3, [r7, #12]
		tempReg |= (1<<SPI_CR1_RXONLY);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000952:	60fb      	str	r3, [r7, #12]
	}

	//Configure the speed of the bus
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed <<SPI_CR1_BR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
	//SPI frame format
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	79db      	ldrb	r3, [r3, #7]
 8000964:	02db      	lsls	r3, r3, #11
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
	//Configure CPOL bit which manages the clock polarity
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a1b      	ldrb	r3, [r3, #8]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
	//Configure CPHA bit which manages at which phase the sampling should occur
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a5b      	ldrb	r3, [r3, #9]
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
	//Configure SSM bit which manages Slave mode setting
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a9b      	ldrb	r3, [r3, #10]
 8000988:	025b      	lsls	r3, r3, #9
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	4313      	orrs	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
	//Configure SSI bit which manages Slave mode setting
	tempReg |= pSPIHandle->SPIConfig.SPI_SSI << SPI_CR1_SSI;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7adb      	ldrb	r3, [r3, #11]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4313      	orrs	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SPI_GetFLagStatus>:

bool SPI_GetFLagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	4013      	ands	r3, r2
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SPI_GetFLagStatus+0x1a>
	{
		return FLAG_SET;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e000      	b.n	80009c8 <SPI_GetFLagStatus+0x1c>
	}

	return FLAG_CLEAR;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTXBuffer, uint32_t len)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	while(len >0)
 80009de:	e02a      	b.n	8000a36 <SPI_SendData+0x64>
	{
		while(SPI_GetFLagStatus(pSPIx, SPI_TXE_FLAG)==FLAG_CLEAR);
 80009e0:	bf00      	nop
 80009e2:	2102      	movs	r1, #2
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff ffe1 	bl	80009ac <SPI_GetFLagStatus>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f083 0301 	eor.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f5      	bne.n	80009e2 <SPI_SendData+0x10>

		if((pSPIx->CR1 & (1<<SPI_CR1_DFF)))
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d00e      	beq.n	8000a20 <SPI_SendData+0x4e>
		{
			//16bit data
			pSPIx->DR = *((uint16_t*)pTXBuffer);
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	60da      	str	r2, [r3, #12]
			len--;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
			len--;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTXBuffer++;
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	e00a      	b.n	8000a36 <SPI_SendData+0x64>
		}
		else
		{
			//8bit data
			pSPIx->DR = *(pTXBuffer);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	60da      	str	r2, [r3, #12]
			len--;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
			pTXBuffer++;
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
	while(len >0)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1d1      	bne.n	80009e0 <SPI_SendData+0xe>
		}
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <SPI_SSOEConfig>:

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t status)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE)
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f043 0204 	orr.w	r2, r3, #4
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 8000a64:	e005      	b.n	8000a72 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f023 0204 	bic.w	r2, r3, #4
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	605a      	str	r2, [r3, #4]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t status)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
	if(status == ENABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d106      	bne.n	8000a9c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000a9a:	e005      	b.n	8000aa8 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
	...

08000ab4 <__libc_init_array>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8000aec <__libc_init_array+0x38>)
 8000ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8000af0 <__libc_init_array+0x3c>)
 8000aba:	1b64      	subs	r4, r4, r5
 8000abc:	10a4      	asrs	r4, r4, #2
 8000abe:	2600      	movs	r6, #0
 8000ac0:	42a6      	cmp	r6, r4
 8000ac2:	d109      	bne.n	8000ad8 <__libc_init_array+0x24>
 8000ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8000af4 <__libc_init_array+0x40>)
 8000ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8000af8 <__libc_init_array+0x44>)
 8000ac8:	f000 f818 	bl	8000afc <_init>
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	10a4      	asrs	r4, r4, #2
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	42a6      	cmp	r6, r4
 8000ad4:	d105      	bne.n	8000ae2 <__libc_init_array+0x2e>
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000adc:	4798      	blx	r3
 8000ade:	3601      	adds	r6, #1
 8000ae0:	e7ee      	b.n	8000ac0 <__libc_init_array+0xc>
 8000ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae6:	4798      	blx	r3
 8000ae8:	3601      	adds	r6, #1
 8000aea:	e7f2      	b.n	8000ad2 <__libc_init_array+0x1e>
 8000aec:	08000b1c 	.word	0x08000b1c
 8000af0:	08000b1c 	.word	0x08000b1c
 8000af4:	08000b1c 	.word	0x08000b1c
 8000af8:	08000b20 	.word	0x08000b20

08000afc <_init>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	bf00      	nop
 8000b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b02:	bc08      	pop	{r3}
 8000b04:	469e      	mov	lr, r3
 8000b06:	4770      	bx	lr

08000b08 <_fini>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	bf00      	nop
 8000b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0e:	bc08      	pop	{r3}
 8000b10:	469e      	mov	lr, r3
 8000b12:	4770      	bx	lr
