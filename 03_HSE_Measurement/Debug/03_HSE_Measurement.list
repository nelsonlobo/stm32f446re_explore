
03_HSE_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  0800036c  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  0000136c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000364  08000364  0000136c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000364  0800036c  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00001364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000368  08000368  00001368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800036c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800036c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000011b  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000098  00000000  00000000  000014b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fd0  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004d9  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003e62  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000068d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800034c 	.word	0x0800034c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800034c 	.word	0x0800034c

08000204 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
		uint32_t *pRccCRReg = (uint32_t*) (RCC_CR_REG_ADDR);
 800020a:	4b24      	ldr	r3, [pc, #144]	@ (800029c <main+0x98>)
 800020c:	617b      	str	r3, [r7, #20]
		*pRccCRReg |= (1<<18);
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	601a      	str	r2, [r3, #0]
		*pRccCRReg |= (1<<16);
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	601a      	str	r2, [r3, #0]
		while(!(*pRccCRReg&(1<<17)));
 8000226:	bf00      	nop
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000230:	2b00      	cmp	r3, #0
 8000232:	d0f9      	beq.n	8000228 <main+0x24>

		uint32_t *pRccCfgrReg = (uint32_t*) (RCC_CFG_REG_ADDR);
 8000234:	4b1a      	ldr	r3, [pc, #104]	@ (80002a0 <main+0x9c>)
 8000236:	613b      	str	r3, [r7, #16]
		*pRccCfgrReg |= (0x1<<0);
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f043 0201 	orr.w	r2, r3, #1
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	601a      	str	r2, [r3, #0]
		//Configure MCO2 Clock output
		*pRccCfgrReg |= (0x1<<31);	//Clear 30th and 31st bit
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800024c:	693b      	ldr	r3, [r7, #16]
 800024e:	601a      	str	r2, [r3, #0]
		//Configure prescalar for Oscillator
		*pRccCfgrReg |= (0x4<<27);	//Clear 30th and 31st bit
 8000250:	693b      	ldr	r3, [r7, #16]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	601a      	str	r2, [r3, #0]

		//Configure RCC CFGR register to select the HSI as clock-source
	//	*pRccCfgrReg &= ~(0x7<<27);	//Clear 30th and 31st bit

		//Configure GPIOC to enable clock to its port
		uint32_t *pRccAhb1Enr = (uint32_t*)(RCC_GPIOC_REG_ADDR);
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <main+0xa0>)
 800025e:	60fb      	str	r3, [r7, #12]
		*pRccAhb1Enr |= (1<<2);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f043 0204 	orr.w	r2, r3, #4
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	601a      	str	r2, [r3, #0]

		//Configure PC9 to AF0 to activate the MCO2 function
		uint32_t *pGPIOCModeReg =	(uint32_t*)(GPIOC_MODER_ADDR);
 800026c:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <main+0xa4>)
 800026e:	60bb      	str	r3, [r7, #8]
		*pGPIOCModeReg &= ~(0x3<<18);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	601a      	str	r2, [r3, #0]
		*pGPIOCModeReg |= (0x2<<18);
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	601a      	str	r2, [r3, #0]

		//Configure PC9 to AF0 to activate the MCO2 function
		uint32_t *pGPIOC_AFHReg =	(uint32_t*)(GPIOC_AFHR_ADDR);
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <main+0xa8>)
 800028a:	607b      	str	r3, [r7, #4]
		*pGPIOC_AFHReg &= ~(0xF<<4);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	for(;;);
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <main+0x94>
 800029c:	40023800 	.word	0x40023800
 80002a0:	40023808 	.word	0x40023808
 80002a4:	40023830 	.word	0x40023830
 80002a8:	40020800 	.word	0x40020800
 80002ac:	40020824 	.word	0x40020824

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 f811 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ff8f 	bl	8000204 <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4d0d      	ldr	r5, [pc, #52]	@ (800033c <__libc_init_array+0x38>)
 8000308:	4c0d      	ldr	r4, [pc, #52]	@ (8000340 <__libc_init_array+0x3c>)
 800030a:	1b64      	subs	r4, r4, r5
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	2600      	movs	r6, #0
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	4d0b      	ldr	r5, [pc, #44]	@ (8000344 <__libc_init_array+0x40>)
 8000316:	4c0c      	ldr	r4, [pc, #48]	@ (8000348 <__libc_init_array+0x44>)
 8000318:	f000 f818 	bl	800034c <_init>
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	2600      	movs	r6, #0
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f855 3b04 	ldr.w	r3, [r5], #4
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	f855 3b04 	ldr.w	r3, [r5], #4
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000364 	.word	0x08000364
 8000348:	08000368 	.word	0x08000368

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
